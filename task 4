#include <iostream>
#include <stack>
using namespace std;

template <typename T>
class TreeNode {
public:
    T data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(T val) : data(val), left(nullptr), right(nullptr) {}
};

template <typename T>
class BinaryTree {
private:
    TreeNode<T>* root;

public:
    BinaryTree() : root(nullptr) {}

    TreeNode<T>* getRoot() const {
        return root;
    }

    void insert(T val) {
        root = insertRecursive(root, val);
    }

private:
    TreeNode<T>* insertRecursive(TreeNode<T>* node, T val) {
        if (!node)
            return new TreeNode<T>(val);

        if (val < node->data)
            node->left = insertRecursive(node->left, val);
        else
            node->right = insertRecursive(node->right, val);

        return node;
    }

public:
    class Iterator {
    private:
        stack<TreeNode<T>*> stack;

        void pushLeft(TreeNode<T>* node) {
            while (node) {
                stack.push(node);
                node = node->left;
            }
        }

    public:
        Iterator(TreeNode<T>* root) {
            pushLeft(root);
        }

        bool hasNext() const {
            return !stack.empty();
        }

        T next() {
            TreeNode<T>* current = stack.top();
            stack.pop();
            T result = current->data;
            if (current->right) {
                pushLeft(current->right);
            }
            return result;
        }
    };

    Iterator getIterator() const {
        return Iterator(root);
    }
};

int main() {
    BinaryTree<int> tree;

    tree.insert(8);
    tree.insert(3);
    tree.insert(10);
    tree.insert(1);
    tree.insert(6);
    tree.insert(14);
    tree.insert(4);

    auto it = tree.getIterator();
    while (it.hasNext()) {
        cout << it.next() << " ";
    }

    return 0;
}
